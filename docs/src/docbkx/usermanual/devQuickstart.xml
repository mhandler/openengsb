<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

   Copyright 2010 OpenEngSB Division, Vienna University of Technology

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<chapter id="devQuickstart">
  <title>Quickstart for OpenEngSB Developer</title>
  <para>
    This chapter gives an overview how to quickly start with the OpenEngSB.  
  </para>
  <section id="devQickstart.pre">
    <title>Prerequisite</title>
    <para>
      First of all the JDK6 should be installed on the system and the JAVA_HOME variable should be set. All further steps
      are described in the sub sections of this chapter.
    </para>
    <section id="devQickstart.pre.git">
      <title>Install GIT</title>
      <para>
        Further more its assumed that GIT had been installed. For GIT we recommend the latest Cygwin with the git 
        packages. Please set at least the following variables:
      </para>
      <programlisting format="linespecific" language="xml"><![CDATA[git config --global user.name "Firstname Secondname"
git config --global user.email "my@email.com"
git config --global core.autcrlf input]]></programlisting>
    </section>
    <section id="devQickstart.pre.maven">
      <para>
        Finally download Apache Maven and unpack it. Add the path of the maven binary to your PATH variable. Further more
        you should add a MAVEN_OPTS variable with "-Xmx1024M -XX:MaxPermSize=512m".
      </para>
    </section>
    <section id="devQickstart.pre.smx">
      <title>Install Servicemix</title>
      <para>
        Now download Apache Servicemix in the latest version and unpack it somewhere. In the servicemix please execute the
        startup script bin/servicemix. 
      </para>  
    </section>
  </section>
  <section id="devQickstart.essential">
    <title>Essential Startup</title>
    <para>
      The simplest and most basic setup, required for all examples requires, first of all to checkout the openengsb 
      master with the following command:
    </para>
    <programlisting format="linespecific" language="xml"><![CDATA[git clone git://github.com/openengsb/openengsb]]></programlisting>
    <para>
      Now startup servicemix with the scripts in servicemix/bin. Finally we build and deploy the OpenEngSB to servicemix.
    </para>
    <programlisting format="linespecific" language="xml"><![CDATA[cd openengsb/scripts
./quickrun.sh
]]></programlisting>
  </section>
  <section id="devQickstart.eclipse">
    <title>Import Source into Eclipse</title>
    <para>
      Eclipse had been chosen by the OpenEngSB team as their main development environment. After checkout the code the
      following command creates the required Eclipse project files:
    </para>
    <programlisting format="linespecific" language="xml"><![CDATA[mvn eclipse:eclipse]]></programlisting>
    <para>
      After this step all projects could be imported at once with the "import existing projects" command in Eclipse.
    </para>
  </section>
  <section id="devQickstart.structure">
    <title>Folder Structure</title>
    <para>
      This section describes the (sub)folder structure of the OpenEngSB. Since this project contains a huge amount of
      projects they are divided into a subfolder hierarchy. Namely there are three parts in the folder structure
      which should be explained step by step. The name of the projects is always generated by the folder
      hierarchy. For example a project nested in openengsb/features/edb/core would be named openengsb-features-edb-core. 
    </para>
    <para>
      The following structure shows the core projects for the OpenEngSB. If a new project is created which es a part of
      the core of the OpenEngSB and which could not be seperated at all it would create a new subfolder in this tree.
      Because of the JBI project structure it is required that more than one project is nested in each subnode (at least
      service-unit and service-engine).
    </para>
    <programlisting format="linespecific" ><![CDATA[openengsb
openengsb/ekb
openengsb/config
openengsb/context
openengsb/package
openengsb/core
openengsb/workflow
openengsb/workflow/drools
openengsb/workflow/bpel
openengsb/testing]]></programlisting>
    <para>
      Beside of the core packages there are additional packages extending the OpenEngSB with additional features and
      therefore stored in a feature subdirectory. These projects could not exist without the OpenEngSB but the OpenEngSB 
      could exist withouth them. They are designed to fulfill a specific purpose to extend the functionality of the OpenEngSB,
      but may not be interesting for most users. For this reason the folder is nested in a deeper structure. 
      Features as the "edb" or "link" could be found here.
    </para>
    <programlisting format="linespecific" ><![CDATA[openengsb
openengsb/features
openengsb/features/edb
openengsb/features/link]]></programlisting>
    <para>
      The last part of the file structure contains the core packages for the OpenEngSB; its domains and connectors. As 
      will be explained later in more detail the OpenEngSB integrates tool differently than a "regular" enterprise
      service bus. An enterprise service bus directly integrats tools, where the OpenEngSB adds an additional abstraction
      layer via domains. This structure is also shown in the file hierarchy. Domains are stored in a seperate subfolder, 
      since they are to be seperated into subprojects in some not too far future.
    </para>
    <para>
      Each domain could be found in the openengsb/domains folder. Domains cover mostly one huge part in the engineering
      domain as SCM, notification, issues and so on. Therefore for each of these parts an additional subfolder had been
      created. The domain itself could be found in the openengsb/domains/XXX/implementation subfolder of a domain. This folder will
      always contain at leas a service-engine or a binding-unit and a service-unit. The service-engine or binding-unit
      are required to implement the domain logic at all where the service-unit is required to configure the domain. Domains
      are always configured only once in one OpenEngSB instance which explains that they are defined directly in the project.
    </para>
    <para>
      Beside the domains the real tool implementations could be found. For the notification domain useful implementations
      are, as shown, the email and jabber implementation which allows to send notifications via jabber or email. Regulary
      the service-engine is implemented, in this case directly in the root folder (.../email or .../jabber) since the service-unit
      is created at runtime for such components.
    </para>
    <para>
      The last interesting part in the domain folder is the openengsb/domains/toolAbstraction folder. This folder contains
      projects which "generally abstract" tools to a higher and better useable level and if its required to use this 
      abstraction layer above several domain-tool-connectors. For example the additional required infrastructure for the
      SVN connector would not make any snese in the additional tool abstraction layer since it is only required once for
      implementing the SVN connector for the SCM domain. But compared to that maven2 could be used for more than one 
      tool-domain. Maven2 could be used at least for build, test and deploy. Therefore there would be duplicated code
      to abstract the tool to the needs of the connectors. The toolAbstraction folder is the right place for additional 
      abstractions required for use cases as described with the maven project. 
    </para>
    <programlisting format="linespecific" ><![CDATA[openengsb
openengsb/domains
openengsb/domains/toolAbstraction
openengsb/domains/notification
openengsb/domains/notification/implementation
openengsb/domains/notification/email
openengsb/domains/notification/jabber
openengsb/domains/scm]]></programlisting>
    <para>
      Since the number of projects, required for the OpenEngSB, increases from day to day it is required to fit all projects
      into this ridgin structure to make it maintain at all.
    </para>
  </section>
  <section id="devQickstart.assembly">
    <title>Assembling the OpenEngSB</title>
  <section id="devQickstart.assembly.introduction">
    <title>Introduction</title>
    <para> This chapter gives a short overview about the assembly procedure of the OpenEngSB. Furthermore a short
      description of the structure of the assembled project is given.
  </para>
  </section>
  <section id="devQickstart.assembly.howto">
    <title>Howto assemble the OpenEngSB</title>
    <para>
      To create a distributable form of the OpenEngSB simply issue the following commands in the root directory of the project.
      <programlisting>
        > mvn package -Pintegration-test,license-check,docs
        > cd package/assembly
        > mvn dependency:unpack
        > mvn assembly:assembly
        > mvn antrun:run
      </programlisting> 
      Then a zip file is created in the folder package/assembly/target. The structure of the zip is explained in the following section.
      To ease this process a shell script is contained in the scripts directory (assemble.sh). This scripts build the
      OpenEngSB, assemble it and finally copy the product into the root folder with the name <literal>openengsb-VERSION.zip.</literal>
    </para>
  </section>
  <section id="devQickstart.assembly.structure">
    <title>Structure</title>
    <para>
      <programlisting>
        openengsb-{version}
        |
        |- docs
        |    |
        |    |- html
        |    |- pdf
        |
        |- bin
        |   |
        |   |- run.sh (start webserver with openengsb)
        |   |- stop.sh (stop webserver with openengsb)
        |
        |- README
        |- LICENSE
        |- NOTICE
        |
        |- webserver (jetty) with openengsb.war
      </programlisting>
    </para>
  </section>
  </section>
</chapter>
